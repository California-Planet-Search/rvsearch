#Utilities for loading data, checking for known planets, etc.
import numpy as np
import pandas as pd
import radvel
import cpsutils
from cpsutils import io

'''
Functions for posterior modification (resetting parameters, intializing, etc.)
'''
def reset_params(post, default_pdict):
	#Reset post.params values to default values
    pass

def initialize_post(data, params=None):
    #TO-DO: DEFINE 'DATA' INPUT, FIGURE OUT WHICH DATAFRAME FORMAT
    """
    Initialize a posterior object with data, params, and priors

    Args:

    Returns:
        post (radvel Posterior object)
    """

    if params == None:
        params = radvel.Parameters(0, basis='per tc secosw sesinw logk')
    iparams = radvel.basis._copy_params(self.params)

    #initialize RVModel
    time_base = np.mean([data['time'].max(), data['time'].min()])
    mod = radvel.RVModel(self.params, time_base=time_base)

    #initialize Likelihood objects for each instrument
    telgrps = data.groupby('tel').groups
    likes = {}

    for inst in telgrps.keys():
        likes[inst] = radvel.likelihood.RVLikelihood(
            mod, data.iloc[telgrps[inst]].time, data.iloc[telgrps[inst]].mnvel,
            data.iloc[telgrps[inst]].errvel, suffix='_'+inst)

        likes[inst].params['gamma_'+inst] = iparams['gamma_'+inst]
        likes[inst].params['jit_'+inst] = iparams['jit_'+inst]

    like = radvel.likelihood.CompositeLikelihood(list(likes.values()))

    post = radvel.posterior.Posterior(like)
    #post.priors = self.priors
    return post

'''
Series of functions for reading data from various sources into pandas dataframes.
'''
def read_from_csv(filename, verbose=True):
    data = pd.DataFrame.from_csv(filename)
    if 'tel' not in data.columns:
        if verbose:
            print('Telescope type not given, defaulting to HIRES.')
        data['tel'] = 'HIRES'
        #Question: DO WE NEED TO CONFIRM VALID TELESCOPE TYPE?
    return data

def read_from_arrs(t, mnvel, errvel, tel=None, verbose=True):
    data = pd.DataFrame()
    data['time'], data['mnvel'], data['errvel'] = t, mnvel, errvel
    if tel == None:
        if verbose:
            print('Telescope type not given, defaulting to HIRES.')
        data['tel'] = 'HIRES'
    else:
        data['tel'] = tel
    return data

def read_from_vst(filename, verbose=True):
    '''
    This reads .vst files generated by the CPS pipeline, which
    means that it is only relevant for HIRES data.
    '''

    b = cpsutils.io.read_vst(filename)
    data = pd.DataFrame()
    data['time'] = b.jd
    data['mnvel'] = b.mnvel
    data['errvel'] = b.errvel
    data['tel'] = 'HIRES'
    return data

def read_from_cadence(starname, verbose=True):
    pass
